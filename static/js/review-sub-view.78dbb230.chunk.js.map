{"version":3,"sources":["components/ReviewsList/ReviewsList.module.css","components/ReviewsList/ReviewsList.js","views/MovieDetailsView/ReviewsSubView/ReviewsSubView.js"],"names":["module","exports","ReviewsList","reviews","length","map","path","id","author","content","avatar_path","author_details","src","includes","charAt","substring","movieShelfAPI","alt","className","classes","avatar","PENDING","Status","REJECTED","RESOLVED","ReviewsSubView","slug","useParams","useState","setReviews","status","setStatus","error","setError","movieId","getIdFromSlug","useEffect","then","results","catch","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,OAAS,8B,wIC0DZC,EAvDK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAerB,OAAKA,EAAQC,OAKX,6BACGD,EAAQE,KACP,gBAnBaC,EAmBVC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAA2BC,EAA1C,EAAwBC,eAAkBD,YAA1C,OACE,+BACE,4BACE,+BAAOF,MAERE,GACC,qBACEE,KA1BKN,EA0BUI,EAzBvBJ,EAAKO,SAAS,YACO,MAAnBP,EAAKQ,OAAO,GACcR,EALcS,UAAU,GAQ/CT,EAGFU,IAA+BV,EAAM,MAkBhCW,IAAKT,EACLU,UAAWC,IAAQC,SAGvB,kCACG,+BAAOX,IADV,SAXOF,QAPR,4E,eCdHc,EAAgCC,IAAhCD,QAASE,EAAuBD,IAAvBC,SAAUC,EAAaF,IAAbE,SAqCZC,EAnCQ,WACrB,IAAQC,EAASC,cAATD,KAER,EAA8BE,mBAAS,MAAvC,mBAAOzB,EAAP,KAAgB0B,EAAhB,KACA,EAA4BD,mBAASP,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEMC,EAAUC,YAAcT,GAe9B,OAbAU,qBAAU,WACRpB,IACwBkB,GACrBG,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPT,EAAWS,GACXP,EAAUP,MAEXe,OAAM,SAACP,GACNC,EAASD,GACTD,EAAUR,QAEb,CAACW,IAEAJ,IAAWT,EACN,2CAGLS,IAAWP,EACN,4BAAIS,EAAMQ,UAGfV,IAAWN,EACN,cAAC,EAAD,CAAarB,QAASA,SAD/B","file":"static/js/review-sub-view.78dbb230.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ReviewsList_avatar__3nKvr\"};","import PropTypes from 'prop-types';\r\nimport classes from './ReviewsList.module.css';\r\nimport * as movieShelfAPI from 'services/movieshelf-api';\r\n\r\nconst ReviewsList = ({ reviews }) => {\r\n  const deleteFirstCharacter = (string) => string.substring(1);\r\n\r\n  const createSrc = (path) => {\r\n    if (path.includes('gravatar')) {\r\n      if (path.charAt(0) === '/') {\r\n        return deleteFirstCharacter(path);\r\n      }\r\n\r\n      return path;\r\n    }\r\n\r\n    return movieShelfAPI.generateImageURL(path, 200);\r\n  };\r\n\r\n  if (!reviews.length) {\r\n    return <p>We do not have any reviews for this movie.</p>;\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {reviews.map(\r\n        ({ id, author, content, author_details: { avatar_path } }) => (\r\n          <li key={id}>\r\n            <p>\r\n              <span>{author}</span>\r\n            </p>\r\n            {avatar_path && (\r\n              <img\r\n                src={createSrc(avatar_path)}\r\n                alt={author}\r\n                className={classes.avatar}\r\n              />\r\n            )}\r\n            <p>\r\n              \"<span>{content}</span>\"\r\n            </p>\r\n          </li>\r\n        )\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nReviewsList.propTypes = {\r\n  reviews: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      author: PropTypes.string.isRequired,\r\n      content: PropTypes.string.isRequired,\r\n      author_details: PropTypes.shape({ avatar_path: PropTypes.string }),\r\n    })\r\n  ),\r\n};\r\n\r\nexport default ReviewsList;\r\n","import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport ReviewsList from 'components/ReviewsList';\r\nimport * as movieShelfAPI from 'services/movieshelf-api';\r\nimport getIdFromSlug from 'utils/get-id-from-slug';\r\nimport Status from 'utils/state-machine';\r\nconst { PENDING, REJECTED, RESOLVED } = Status;\r\n\r\nconst ReviewsSubView = () => {\r\n  const { slug } = useParams();\r\n\r\n  const [reviews, setReviews] = useState(null);\r\n  const [status, setStatus] = useState(PENDING);\r\n  const [error, setError] = useState(null);\r\n\r\n  const movieId = getIdFromSlug(slug);\r\n\r\n  useEffect(() => {\r\n    movieShelfAPI\r\n      .fetchReviewsForMovie(movieId)\r\n      .then(({ results }) => {\r\n        setReviews(results);\r\n        setStatus(RESOLVED);\r\n      })\r\n      .catch((error) => {\r\n        setError(error);\r\n        setStatus(REJECTED);\r\n      });\r\n  }, [movieId]);\r\n\r\n  if (status === PENDING) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (status === REJECTED) {\r\n    return <p>{error.message}</p>;\r\n  }\r\n\r\n  if (status === RESOLVED) {\r\n    return <ReviewsList reviews={reviews} />;\r\n  }\r\n};\r\n\r\nexport default ReviewsSubView;\r\n"],"sourceRoot":""}