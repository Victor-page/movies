{"version":3,"sources":["components/CastList/CastList.js","views/MovieDetailsView/CastSubView/CastSubView.js"],"names":["CastList","cast","map","id","name","character","profile_path","src","movieShelfAPI","alt","PENDING","Status","REJECTED","RESOLVED","CastSubView","slug","useParams","useState","setCast","status","setStatus","error","setError","movieId","getIdFromSlug","useEffect","then","catch","message"],"mappings":"wLAmCeA,EAhCE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACf,6BACGA,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,+BACE,4BACE,+BAAOF,MAERE,GACC,qBACEC,IAAKC,IAA+BF,EAAc,KAClDG,IAAKL,IAGT,4CACa,+BAAOC,SAXbF,S,eCAPO,EAAgCC,IAAhCD,QAASE,EAAuBD,IAAvBC,SAAUC,EAAaF,IAAbE,SAsCZC,EApCK,WAClB,IAAQC,EAASC,cAATD,KAER,EAAwBE,mBAAS,MAAjC,mBAAOhB,EAAP,KAAaiB,EAAb,KACA,EAA4BD,mBAASP,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEMC,EAAUC,YAAcT,GAgB9B,OAdAU,qBAAU,WACRL,EAAUV,GACVF,IACee,GACZG,MAAK,YAAe,IAAZzB,EAAW,EAAXA,KACPiB,EAAQjB,GACRmB,EAAUP,MAEXc,OAAM,SAACN,GACNC,EAASD,GACTD,EAAUR,QAEb,CAACW,IAEAJ,IAAWT,EACN,2CAGLS,IAAWP,EACN,4BAAIS,EAAMO,UAGfT,IAAWN,EACN,cAAC,EAAD,CAAUZ,KAAMA,SADzB","file":"static/js/cast-sub-view.610fd702.chunk.js","sourcesContent":["import PropTypes, { arrayOf } from 'prop-types';\r\nimport * as movieShelfAPI from 'services/movieshelf-api';\r\n\r\nconst CastList = ({ cast }) => (\r\n  <ul>\r\n    {cast.map(({ id, name, character, profile_path }) => (\r\n      <li key={id}>\r\n        <p>\r\n          <span>{name}</span>\r\n        </p>\r\n        {profile_path && (\r\n          <img\r\n            src={movieShelfAPI.generateImageURL(profile_path, 200)}\r\n            alt={name}\r\n          />\r\n        )}\r\n        <p>\r\n          Character: <span>{character}</span>\r\n        </p>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nCastList.propTypes = {\r\n  cast: arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      character: PropTypes.string.isRequired,\r\n      profile_path: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default CastList;\r\n","import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport * as movieShelfAPI from 'services/movieshelf-api';\r\nimport CastList from 'components/CastList';\r\nimport getIdFromSlug from 'utils/get-id-from-slug';\r\nimport Status from 'utils/state-machine';\r\nconst { PENDING, REJECTED, RESOLVED } = Status;\r\n\r\nconst CastSubView = () => {\r\n  const { slug } = useParams();\r\n\r\n  const [cast, setCast] = useState(null);\r\n  const [status, setStatus] = useState(PENDING);\r\n  const [error, setError] = useState(null);\r\n\r\n  const movieId = getIdFromSlug(slug);\r\n\r\n  useEffect(() => {\r\n    setStatus(PENDING);\r\n    movieShelfAPI\r\n      .fetchActors(movieId)\r\n      .then(({ cast }) => {\r\n        setCast(cast);\r\n        setStatus(RESOLVED);\r\n      })\r\n      .catch((error) => {\r\n        setError(error);\r\n        setStatus(REJECTED);\r\n      });\r\n  }, [movieId]);\r\n\r\n  if (status === PENDING) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (status === REJECTED) {\r\n    return <p>{error.message}</p>;\r\n  }\r\n\r\n  if (status === RESOLVED) {\r\n    return <CastList cast={cast} />;\r\n  }\r\n};\r\n\r\nexport default CastSubView;\r\n"],"sourceRoot":""}